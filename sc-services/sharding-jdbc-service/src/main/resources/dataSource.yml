dataSources:
  ds0: !!com.alibaba.druid.pool.DruidDataSource
    driverClassName: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/ds0
    username: root
    password: root
  ds0_s0: !!com.alibaba.druid.pool.DruidDataSource
    driverClassName: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/ds0_s0
    username: root
    password: root
  ds0_s1: !!com.alibaba.druid.pool.DruidDataSource
    driverClassName: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/ds0_s1
    username: root
    password: root
  ds1: !!com.alibaba.druid.pool.DruidDataSource
    driverClassName: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/ds1
    username: root
    password: root
  ds1_s0: !!com.alibaba.druid.pool.DruidDataSource
    driverClassName: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/ds1_s0
    username: root
    password: root
  ds1_s1: !!com.alibaba.druid.pool.DruidDataSource
    driverClassName: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/ds1_s1
    username: root
    password: root

# 数据分片
shardingRule:
  tables:
    t_user:
      actualDataNodes: ds${0..1}.t_user${0..1}
      # 分库策略，缺省表示使用默认分库策略
      databaseStrategy:
        # 行表达式分片策略
        inline:
          shardingColumn: id
          # 分片算法行表达式，需符合groovy语法
          algorithmExpression: ds${id % 2}
      # 分表策略
      tableStrategy:
        inline:
          shardingColumn: sex
          algorithmExpression: t_user${sex % 2}
      keyGeneratorColumnName: id
    t_order:
      actualDataNodes: ds${0..1}.t_order${0..1}
      databaseStrategy:
        inline:
          shardingColumn: user_id
          algorithmExpression: ds${user_id % 2}
      tableStrategy:
        inline:
          shardingColumn: order_id
          algorithmExpression: t_order${order_id % 2}
      keyGeneratorColumnName: order_id
  bindingTables:
    - t_user,t_order
  # 未配置分片规则的表将通过默认数据源定位
  defaultDataSourceName: ds0
  # 默认数据库分片策略，同分库策略
  defaultDatabaseStrategy:
    inline:
      shardingColumn: id
      algorithmExpression: ds${id % 2}
  # 默认表分片策略，同分库策略
  defaultTableStrategy:
    none:
  # 默认的主键生成算法,如果没有设置,默认为SNOWFLAKE算法
#  defaultKeyGenerator:
#    # 默认自增列值生成器类型，缺省将使用org.apache.shardingsphere.core.keygen.generator.impl.SnowflakeKeyGenerator。
#    # 可使用用户自定义的列值生成器或选择内置类型：SNOWFLAKE/UUID
#    type: SNOWFLAKE
#    column: order_id

  # 读写分离
#  masterSlaveRules:
#    # 读写分离数据源名称
#    ms_ds0:
#      # 主库数据源名称
#      masterDataSourceName: ds0
#      # 从库数据源名称列表
#      slaveDataSourceNames:
#        - ds0_s0
#        - ds0_s1
#      # 从库负载均衡算法类型，可选值：ROUND_ROBIN，RANDOM。若`loadBalanceAlgorithmClassName`存在则忽略该配置
#      loadBalanceAlgorithmType: ROUND_ROBIN
#    ms_ds1:
#      masterDataSourceName: ds1
#      slaveDataSourceNames:
#        - ds1_s0
#        - ds1_s1
#      loadBalanceAlgorithmType: ROUND_ROBIN
  # 属性配置
  props:
    # 是否开启SQL显示，默认值: false
    sql.show: true